<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project basedir="." default="build" name="SWTRipper">
	
	<property file="build.properties"/>
	
    <property environment="env"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
	
	<!-- we may want to pull these out into a properties file eventually -->
	<property name="src.dir" value="src"/>
	<property name="build.dir" value="bin"/>
	<property name="lib.dir" value="lib"/>
	<property name="dist.dir" value="dist"/>
	<property name="test.dir" value="test"/>
	<property name="test.src.dir" value="${test.dir}/src"/>
	<property name="test.build.dir" value="${test.dir}/bin"/>
	<property name="test.lib.dir" value="${test.dir}/lib"/>
	<property name="test.out.dir" value="${test.dir}/testresults"/>
	<property name="swtmodel.jar" value="${lib.dir}/swtmodel.jar"/>
	<property name="swtripper.jar" value="${dist.dir}/swtripper.jar"/>
	<property name="junit.dir" value="${test.lib.dir}/junit-4.8.2"/>
	<property name="junit.jar" value="${junit.dir}/junit.jar"/>
	<property name="findbugs.home" value="${test.lib.dir}/findbugs-1.3.9"/>
	<property name="findbugs.out" value="${test.dir}/ripper-fb.xml"/>
	<path id="findbugs.classpath">
		<fileset dir="${findbugs.home}">
			<!-- this is why you should have something manage dependencies like maven,
				 it's such a waste to have all that cruft on the classpath -->
			<include name="**/*.jar"/>
		</fileset>
	</path>
    
    <path id="SWTRipper.classpath">
        <pathelement location="${build.dir}"/>
        <pathelement location="${lib.dir}/args4j-2.0.12.jar"/>
        <pathelement location="${lib.dir}/swt.jar"/>
        <pathelement location="${lib.dir}/log4j-1.2.15.jar"/>
        <pathelement location="${lib.dir}/GUITARModel-Core.jar"/>
        <pathelement location="${lib.dir}/GUIRipper-Core.jar"/>
        
        <!-- swtmodel.jar is currently copied from the ripper job by Jenkins at runtime -->
        <!-- TODO when we do a release, make sure we include swtmodel.jar in lib directly so that it can build without Jenkins -->
    	<pathelement location="${swtmodel.jar}"/>
    </path>
    
    <target name="init">
        <mkdir dir="${build.dir}"/>
        <copy includeemptydirs="false" todir="${build.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
        
	<target name="build" depends="init">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="${build.dir}" source="${source}" target="${target}">
            <src path="${src.dir}"/>
            <classpath refid="SWTRipper.classpath"/>
        </javac>
    </target>
	
    <target name="dist" depends="build" description="Build a JAR of this project">
		<mkdir dir="${dist.dir}"/>
		<jar destfile="${swtripper.jar}">
			<fileset dir="${build.dir}"/>
		</jar>
	</target>
	
	<target name="check-model" description="Check if SWTModel is in lib">
		<!-- set swtmodel.present if swtmodel.jar is in lib, 
			 this has the effect of checking whether this is a Jenkins build-->
		<available file="${swtmodel.jar}" property="swtmodel.present"/>
	</target>
	
	<!-- Build and copy swtmodel.jar unless it's already here -->
	<target name="build-model" depends="check-model" description="Build SWTModel and copy" unless="swtmodel.present">
		<ant antfile="build.xml" dir="${swtmodel.project.dir}" target="dist"/>
		<copy file="${swtmodel.project.dir}/dist/swtmodel.jar" todir="${lib.dir}"/>
	</target>
		
	<target name="test" depends="unit-test"/>
	
	<target name="init-test">
		<mkdir dir="${test.build.dir}"/>
	</target>
	
	<target name="build-tests" depends="build,init-test">
		<javac debug="true" debuglevel="${debuglevel}" destdir="${test.build.dir}" source="${source}" target="${target}">
            <src path="${test.src.dir}"/>
            <classpath>
            	<path refid="SWTRipper.classpath"/>
            	<pathelement location="${junit.jar}"/>
        	</classpath>
        </javac>
	</target>
	
	<target name="unit-test" description="Run unit tests" depends="init-test,build-tests">
		<mkdir dir="${test.out.dir}"/>
		<junit printsummary="true">
			<classpath>
				<pathelement location="${junit.jar}"/>
				<path refid="SWTRipper.classpath"/>
				<pathelement path="${test.build.dir}"/>
			</classpath>
			<batchtest todir="${test.out.dir}">
				<fileset dir="${test.build.dir}"/>
				<formatter type="xml"/>
			</batchtest>
		</junit>
	</target>
	
	<target name="findbugs" depends="build">
		<!-- See http://cfunit.sourceforge.net/help-antview.php if you get an Eclipse warning about an unknown taskdef -->
		<taskdef name="findbugs" classpathref="findbugs.classpath" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
		<findbugs home="${findbugs.home}" output="xml" outputFile="${findbugs.out}">
			<sourcePath path="${src.dir}"/>
			<class location="${build.dir}"/>
			<auxclasspath refid="SWTRipper.classpath"/>
		</findbugs>
	</target>
	
	<target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
		<delete dir="${test.build.dir}"/>
		<delete dir="${test.out.dir}"/>
		<delete file="${findbugs.out}"/>
        <!-- remove swtmodel.jar so Jenkins can add a potentially newer version -->
        <!-- TODO remove this when we release -->
        <delete file="${swtmodel.jar}"/>
    </target>
            
</project>